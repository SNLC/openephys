function plot_unit(animal,subfold,exp_type,unit,tc,opsin,prefPSTH,conds)

% animal = animal name (e.g., 'M21')
% subfold = possible subfolder within animal name (e.g., 'LP' or 'pen1')
% exp_type (e.g., 'intensities' or 'trains')
% unit = name of unit to plot (eg., 6457)
% tc = 1 or 0 (whether to plot tuning curve instead of blank trials)
% opsin: 'halo' or anythign else
% prefPSTH = 1 or 0 (default; whether to also plot psth of preferred direction trials)
% OPTIONAL: conds = e.g., [1 3] (default is all) (1 is no-light condition)


if contains(animal,'vsc','ignorecase',1)
    color_mat = [0 0 0; .083 .567 .6; 1 .6 1; .5 .52 .875];  % teal, pink, purple
elseif contains(animal,'sc','ignorecase',1)
    color_mat = [0 0 0; 0 .2 .9; 1 .6 1; .6 .52 .95]; % blue, pink, purple 
elseif contains(animal,'npr','ignorecase',1) 
    color_mat = [0 0 0; 0 .2 .9];   %L5
elseif contains(animal,'md','ignorecase',1)
    color_mat = [0 0 0; 0 .2 .9; .166 .674 .188; .083 .567 .600];
elseif contains(animal,'m','ignorecase',1)
    color_mat = [0 0 0; .166 .674 .188];   %L6
else
    color_mat = [0 0 0; 0 .8 1; 0 0 1; 0 0.5 .4; 0 .7 .2;0 .8 1; 0 0 1]; % for graphing purposes (first is black, last is green)
end

% load appropriate results file
main_dir = 'H:\LPproject\LPresults';
cd(main_dir)
all_figs = 'H:\LPproject\LPresults\UnitFigures';

s=dir;
names = {s.name};
which_fold = find(cellfun(@(x) contains(x,animal,'ignorecase',1),names));
if length(which_fold)>1
    which_fold = find(cellfun(@(x) contains(x,animal,'ignorecase',1)&&contains(x,subfold,'ignorecase',1),names));
end
animal_dir = fullfile(main_dir,names{which_fold});
ss=dir(animal_dir);
ss_names = {ss.name};
which_subfold = find(cellfun(@(x) contains(x,exp_type,'ignorecase',1),ss_names));
exp_dir = fullfile(animal_dir,ss_names{which_subfold(1)});      % may need to change - in cases where there are multiple halo exps, currently uses first one?
sss = dir(exp_dir);
sss_names = {sss.name};
results_file = sss_names{cellfun(@(x) contains(x,'results','ignorecase',1),sss_names)};
load(fullfile(exp_dir,results_file))

% find desired unit
all_units = [unitinfo.name];
unit_ind = find(all_units==unit);
unit_rast = unitinfo(unit_ind).rast;
unit_psthV = FRs(unit_ind).psthVisual;
unit_psthB = FRs(unit_ind).psthBlank;
if nargin < 8
    conds = [1:size(unit_psthV,1)];
end
if isfield(params,'all_light') % if opto experiment
    all_conds = unique(params.all_light);
    which_trials = ismember(params.all_light,all_conds(conds));
    all_light = nan(size(unit_rast,1),1);
    for c=1:length(conds)
        all_light(params.all_light==all_conds(conds(c))) = c-1; % -1 so first (no light ) cond = 0
    end
else
    all_light = zeros(size(unit_rast,1),1);
    which_trials = logical(ones(size(unit_rast,1),1));
end
    

% example psth 
fig_name = sprintf('%s\\%s_%s_clust%d_fig',all_figs,animal,exp_type,unit);
figure;
subplot(1,3+prefPSTH,1)
if isfield(params,'all_light')
    light_start = params.av_light_start(conds(2:end)-1);
    pulse_dur = params.pulse_dur(conds);
else
    light_start = 0;
    pulse_dur = zeros(1,length(conds));
end
totaltime = params.prestim+params.stimtime+params.poststim;
plot_raster(unit_rast(which_trials,:),params.prestim,totaltime,all_light(which_trials),light_start,pulse_dur,opsin,color_mat)
xlabel('Time from stimulus onset (s)','fontsize',14)
ylabel('Trial (by condition)','fontsize',14)
set(gca,'FontSize',14,'fontname','arial','fontweight','bold','linewidth',2);

subplot(1,3+prefPSTH,2)
binsize = .025;
plot_psth(unit_psthV(conds,:),binsize,params.prestim,params.stimtime,totaltime,all_light(which_trials),light_start,pulse_dur,opsin,color_mat);
xlabel('Time from stimulus onset (s)','fontsize',14)
ylabel('Average FR (spks/s)','fontsize',14)
set(gca,'FontSize',14,'fontname','arial','fontweight','bold','linewidth',2);

if tc
    subplot(1,3+prefPSTH,3)
    oris = unique(params.trial_type(which_trials,contains(params.IVs,'ori')));
    oris = oris(oris<999);
    window = [params.prestim*1000+251 floor(1000*(max(light_start)+pulse_dur(end)))];
    curve = nan(length(conds),length(oris));
    for o=1:length(oris)
        for lc = 1:length(conds)
            oritrials = params.trial_type(:,contains(params.IVs,'ori'))==oris(o) & all_light==lc-1 &  params.trial_type(:,contains(params.IVs,'running'))==0; % stationary only
            curve(lc,o) = mean(sum(unit_rast(oritrials,window(1):window(2)),2)/(diff(window)/1000));
            curve_se(lc,o) = std(sum(unit_rast(oritrials,window(1):window(2)),2)/(diff(window)/1000))/sqrt(sum(oritrials));
        end
    end
        for lc = 1:length(conds)
            shadedErrorBar(oris',curve(lc,:),curve_se(lc,:),{'Color',color_mat(lc,:),'linewidth',2},1);  % plot ori tuning in NO RUN trials (NOT baseline-subtracted)
            hold on
            plot(oris,repmat(FRs(unit_ind).blank.ev(1,conds(lc)),length(oris),1),'Color',color_mat(lc,:),'linewidth',1,'linestyle','--');  % plot blank trial FRs for comparison
        end
        yax = get(gca,'YLim');
        ylabel('Firing rate (Hz)','FontSize',24)
        xlabel('Orientation (degrees)','FontSize',24)
        xlim([0 max(oris)])
        xticks(0:90:max(oris))
        set(gca,'FontSize',14,'fontname','arial','fontweight','bold','linewidth',2);
        
else  % default is plotting blanks
    subplot(1,3+prefPSTH,3)
    binsize = .025;
    plot_psth(unit_psthB(conds,:),binsize,params.prestim,params.stimtime,totaltime,all_light(which_trials),params.av_light_start,params.light_dur,opsin,color_mat);
    xlabel('Time from stimulus onset (s)','fontsize',14)
    ylabel('Average FR (spks/s)','fontsize',14)
    set(gca,'FontSize',14,'fontname','arial','fontweight','bold','linewidth',2);
end

if prefPSTH == 1
    oris = unique(params.trial_type(:,strcmp(params.IVs,'ori')));
    oris(oris>=999) = [];
    [~,prefdir] = max(abs(tuning(unit_ind).curve(1,:)-FRs(unit_ind).baseline));   % direction w/ biggest change from baseline (defined from no-light condition)
    ori_trials = params.trial_type(:,strcmpi(params.IVs,'ori'))==oris(prefdir);
    subplot(1,3+prefPSTH,3+prefPSTH)
    ori_psth = make_psth_v2(binsize,0:binsize:total_time_ms/1000,ori_trials,unit_rast,all_light);
    plot_psth(ori_psth,binsize,params.prestim,params.stimtime,totaltime,all_light(ori_trials),light_start,pulse_dur,opsin,color_mat);
end

set(gcf, 'Position', [100, 100, 1500, 400])
print(gcf,'-dpng',fig_name)
% print2eps(save_fig_name,clust304_fig)
print(gcf,'-painters','-depsc',fig_name)


    

if strcmpi(exp_type,'trains') || strcmpi(subfold,'inLP')
    figure;
    make_raster_plot_v2(unit_rast(:,round(min(light_start))*1000-100:round(min(light_start))*1000+299),-((round(min(light_start))-.1)-params.prestim),length(round(min(light_start))*1000-100:round(min(light_start))*1000+299)/1000,params.all_light,.1*ones(length(light_start)),pulse_dur)
    xlabel('Time from stimulus onset (s)','fontsize',14)
    ylabel('Trial (by condition)','fontsize',14)
    set(gca,'FontSize',14,'fontname','arial','fontweight','bold','linewidth',2);
    print(gcf,'-dpng',strcat(fig_name,'_zoom'))
% print2eps(save_fig_name,clust304_fig)
    print(gcf,'-painters','-depsc',strcat(fig_name,'_zoom'))

end

end

function plot_raster(spike_raster,prestim,totaltime,light_trialtypes,light_start,pulse_dur,opsin,color_mat)

% taken from make_raster_plot_v2 to make colors customizable
% spike_raster = num_trials x time (totaltime*1000, so in 1000Hz samp rate)
    % matrix of 1s and 0s indicating when spikes occurred
% prestim = time before visual stimulus onset (in sec)
% totaltime = total time of trial(in sec)
% light_trialtypes = 1xnumtrials vector defining each trial's light
    % condition
% light_start = time when the light started (in sec) for each light cond
% pulse_dur = duration of light pulse (in sec)
    % pulse_dur in trains experiments)
% opsin: 'halo' (red); anything else is blue
% color_mat: each row should be a new color (size(color_mat,1) should =
% length (conds)

num_trials = size(spike_raster,1);
%     color_mat = [0 0 0; 0 .8 1; 0 0 1; 0 0.5 .4; 0 .7 .2; 0 .8 1; 0 0 1]; % for graphing purposes (first is black, last is green)
% color_mat = [0 0 0; .9 0 .3; 0.50, 0.0780, 0.10]; % for halo (red)
% color_mat = [0 0 0; 0 0.5 .4; 0 0.5 0.05];
% color_mat = [0 0 0; 0.05 .4 1];
% color_mat = [0 0 0;.8% % color_mat = [0 0 0; .166 .674 .188];   %L6
% color_mat = [0 0 0; 0 .2 .9];   %L5
% color_mat = [0 0 0;.494 .184 .556];   % LP = purple

time_vec = linspace(-prestim,totaltime-prestim,size(spike_raster,2));      % for x-axis 
cond_colors = ones(1,num_trials);      % just in case you have multiple conditions


% if light experiment, add blue shading on raster
if find(light_trialtypes)         % it was an opto experiment if there's more than one "light" condition (one condition would be nolight)
    [cond,idx] = sort(light_trialtypes);    % sort trials by light conditions
    diff_conds = unique(cond);
    new_spike_rast = spike_raster(idx,:);             % reordered according to light condition
    new_spike_rast(~new_spike_rast) = nan;        % so that you don't plot absence of spikes as y=0
    for c = 1:length(diff_conds)
        cond_colors(cond==diff_conds(c))=c;
    end
    start_patch = find(cond>0,1,'first');     % first trial with light
    end_patch = num_trials;         % assumes all trials where cond > 0 had light
    x1 = light_start-prestim;       % when the light starts

    for c = 1:length(diff_conds)
        start_patch = find(cond==diff_conds(c),1,'first')-1;
        end_patch = find(cond==diff_conds(c),1,'last')-1;
        if sum(diff_conds>10)         % if it was a trains experiment
            for p = 1:(light_trialtypes(idx(end_patch)))
                space = 1/(light_trialtypes(idx(end_patch)));
%                 if (p-1)*space < (totaltime-prestim-x1(c-1))
                    patch([x1(c-1)+((p-1)*space) x1(c-1)+((p-1)*space) x1(c-1)+pulse_dur(c)+((p-1)*space) x1(c-1)+pulse_dur(c)+((p-1)*space) x1(c-1)+((p-1)*space)],[start_patch end_patch end_patch start_patch start_patch], [0.8 0.8 0.9], 'LineStyle', 'none', 'FaceAlpha',.75)
%                 end
            end
        elseif diff_conds(c)         % any other light condition
            if strcmpi(opsin,'halo')
                patch([x1(c-sum(diff_conds==0)) x1(c-sum(diff_conds==0)) x1(c-sum(diff_conds==0))+pulse_dur(c) x1(c-sum(diff_conds==0))+pulse_dur(c) x1(c-sum(diff_conds==0))],[start_patch end_patch end_patch start_patch start_patch], [.9 0 .3], 'LineStyle', 'none', 'FaceAlpha',.10) %for halo
            else
                patch([x1(c-sum(diff_conds==0)) x1(c-sum(diff_conds==0)) x1(c-sum(diff_conds==0))+pulse_dur(c) x1(c-sum(diff_conds==0))+pulse_dur(c) x1(c-sum(diff_conds==0))],[start_patch end_patch end_patch start_patch start_patch], [0.8 0.8 0.9], 'LineStyle', 'none', 'FaceAlpha',.75)
            end
        end
        if length(diff_conds)>1
            line([-prestim totaltime-prestim], [end_patch end_patch]','Color','r','LineStyle','--')
        end
    end
    hold on
else
    new_spike_rast = spike_raster;      %non-opto experiment
    new_spike_rast(~new_spike_rast) = nan; 
end

if exist('xrange','var')        
    rasterrange = [find(time_vec==.4):find(time_vec==.8)];
else
    rasterrange = 1:size(new_spike_rast,2);
end

% draw raster
for t = 1:num_trials     % for each trial
    new_spike_rast(t,find(new_spike_rast(t,:))) = new_spike_rast(t,find(new_spike_rast(t,:)))+(t-1);        % plot 'ones' in vector so that y = trial number
    plot(time_vec(rasterrange),new_spike_rast(t,rasterrange),'.','Color',color_mat(cond_colors(t),:),'MarkerSize',6)    
    hold on
end

ylim([0 num_trials])
xlim([-prestim totaltime-prestim])
xlabel('Time from visual stimulus onset (sec)','fontsize',14)
ylabel('Trial (by condition)','fontsize',14)
end

function plot_psth(psth,binsize,prestim,stimtime,totaltime,all_light_trials,light_start,light_dur,opsin,color_mat)

% taken from make_psth_plot_v2 to make colors customizable
% psth = numconds x length(edges)-1 matrix of spike counts (psth) or firing rate(psth_FR, in spikes/s)
    % can be made by make_psth_v2(binsize,edges,which_trials,spike_raster,all_light_trials)
% binsize = size of bins in which to count spikes (in sec)
% prestim = time before visual stimulus onset (in sec)
% stimtime = duration of visual stimulus (in sec)
% totaltime = total time of trial(in sec)
% all_light_trials = 1xnumtrials vector defining each trial's light
    % condition
% light_start = time when the light started (in sec) (if not                                                                                                                                                                                                 an opto
    % experiment, should be []) - for each light condition
% light_dur = duration of light pulse (in sec) (if not an opto
    % experiment, should be [])
% opsin: 'halo' (red); anything else is blue
% color_mat: each row should be a new color (size(color_mat,1) should =
% length (conds)
    
% color_mat = [0 0 0; 0 .8 1; 0 0 1; 0 0.5 .4; 0 .7 .2;0 .8 1; 0 0 1]; % for graphing purposes (first is black, last is green)
% color_mat = [0 0 0; .9 0 .3; 0.50, 0.0780, 0.10]; % for halo (red)
% color_mat = [0 0 0; 0 0.5 .4; 0 0.5 0.05];
% color_mat = [0 0 0; .05 .4 1];
% color_mat = [0 0 0; .166 .674 .188];   %L6
% color_mat = [0 0 0; 0 .2 .9];   %L5
% color_mat = [0 0 0; .85 .325 .098];   % LGN=orange
% color_mat = [0 0 0; .494 .184 .556];   % LP = purple

edges_stim = [-prestim:binsize:(totaltime-prestim-binsize)]'; % x signifies the timepoint of the START of the bin
for c = 1:size(psth,1)
    plot(edges_stim,psth(c,:),'color',color_mat(c,:),'linewidth',2)
    hold on
end

lightconds = unique(all_light_trials);      % different light conditions

xlim([-prestim totaltime-prestim-binsize])  % because points mark the START of the bin
set(gca,'XMinorTick','on')
yax = get(gca,'YLim');
line([0 0], [0 yax(2)]','Color','k','LineStyle','--','LineWidth',2)
% line([stimtime stimtime], [0 yax(2)]','Color','r','LineWidth',2)
xlabel('Time (sec)','fontsize',14)
ylabel('spikes/sec','Fontsize',14)

% draw when light turned on and off
if length(lightconds)>1         % if multiple light conditions
    if length(unique(light_start)) >1  || length(unique(round(light_dur.*1000))) > 2 % if multiple different light start times or duration times, dotted lines to indicate diff start times
        for ii = 1:length(light_start)
            line([light_start(ii)-prestim light_start(ii)-prestim], [0 yax(2)]','Color',color_mat(ii+1,:),'LineStyle','--','LineWidth',2)
            line([light_start(ii)-prestim+light_dur(ii+sum(lightconds==0)) light_start(ii)-prestim+light_dur(ii+sum(lightconds==0))], [0 yax(2)]','Color',color_mat(ii+1,:),'LineStyle','--','LineWidth',2)
        end
    else        % if only one start time, draw patch
        for c = 1:length(light_start)
            x1 = light_start - prestim;     % when the light starts
            patch_start(c) = edges_stim(find(x1(c)-edges_stim>0,1,'last'));     % in case light doesn't evenly start at the beginning of a bin - start the light patch at the earliest bin with any light in it
%             xx = [patch_start(c) patch_start(c) patch_start(c)+light_dur(c+sum(lightconds==0)) patch_start(c)+light_dur(c+sum(lightconds==0)) patch_start(c)];
            xx = [patch_start(c) patch_start(c) patch_start(c)+light_dur(c+sum(lightconds==0)) patch_start(c)+light_dur(c+sum(lightconds==0)) patch_start(c)];
            yy = [0 yax(2) yax(2) 0 0];
            if strcmpi(opsin,'halo')
                 patch(xx, yy, -1 * ones(size(xx)), [.9 0 .3], 'LineStyle', 'none', 'FaceAlpha',.10) %for halo
            else
                patch(xx, yy, -1 * ones(size(xx)), [0.8 0.8 0.9], 'LineStyle', 'none', 'FaceAlpha',.75)
            end

        end
    end
end
ylim(yax)
end
